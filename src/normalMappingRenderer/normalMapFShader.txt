#version 400 core

const int maxLights = 10;

in vec2 pass_textureCoords;
in vec3 toLightVector[maxLights];
in vec3 toCameraVector;
in float visibility;
in vec3 pass_tangent;
in vec4 shadowCoords;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform sampler2D normalMap;
uniform vec3 lightColor[maxLights];
uniform vec3 attenuation[maxLights];
uniform vec3 coneDirection[maxLights];
uniform float coneAngle[maxLights];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform sampler2D shadowMap;

const int pcfCount = 2;
const float totalTexels = (pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0);

void main(void){

	vec4 normalMapValue = 2.0 * texture(normalMap, pass_textureCoords) - 1.0;

	float mapSize = 4096.0;
	float texelSize = 1.0 / mapSize;
	float totalTexelsInside = 0.0;
	
	for(int x = -pcfCount; x <= pcfCount; x++){
		for(int y = -pcfCount; y <= pcfCount; y++){
			float objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x, y) * texelSize).r;
			if(shadowCoords.z > objectNearestLight + 0.002){
				totalTexelsInside += 1.0;
			}
		}
	}
	
	totalTexelsInside /= totalTexels;
	
	float lightFactor = 1.0 - (totalTexelsInside * shadowCoords.w);

	vec3 unitNormal = normalize(normalMapValue.rgb);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i = 0; i < maxLights; i++){
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDot1 = dot(unitNormal, unitLightVector);
		float brightness = max(nDot1, 0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		
		vec3 diffuse = (brightness * lightColor[i]) / attFactor;
		vec3 specular = (dampedFactor * reflectivity * lightColor[i]) / attFactor;
		
		float toLightAngle = degrees(acos(dot(-normalize(toLightVector[i]), normalize(coneDirection[i]))));
		if(toLightAngle < coneAngle[i]){
			float amount = (coneAngle[i] - toLightAngle);
			amount = clamp(amount, 0.0, 25.0);
			amount /= 25;
			totalDiffuse = totalDiffuse + diffuse * amount;
			totalSpecular = totalSpecular + specular * amount;
		}
	}
	totalDiffuse = max(totalDiffuse * lightFactor, 0.15);
	
	vec4 textureColor = texture(textureSampler, pass_textureCoords);
	if(textureColor.a < 0.5){
		discard;
	}
	
	out_Color = vec4(totalDiffuse, 1.0) * textureColor + vec4(totalSpecular, 1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
	
}
#version 400 core

const int maxLights = 10;

in vec3 position;
in vec2 textureCoords;
in vec3 normal;
in vec3 tangent;

out vec2 pass_textureCoords;
out vec3 toLightVector[maxLights];
out vec3 toCameraVector;
out float visibility;
out vec3 pass_tangent;
out vec4 shadowCoords;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[maxLights];
uniform vec4 plane;

uniform mat4 toShadowMapSpace;

uniform float useFakeLighting;

uniform float numberOfRows;
uniform vec2 offset;

const float density = 0.001;
const float gradient = 1;
const float shadowDistance= 150.0;
const float transitionDistance = 20.0;


void main(void){
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	shadowCoords = toShadowMapSpace * worldPosition;
	
	gl_ClipDistance[0] = dot(worldPosition, plane);
	mat4 modelViewMatrix = viewMatrix * transformationMatrix;
	vec4 positionRelativeToCamera = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * positionRelativeToCamera;
	pass_textureCoords = (textureCoords/numberOfRows) + offset;
	
	vec3 actualNormal = normal;
	if(useFakeLighting < 0.5){
		actualNormal = vec3(0.0, 1.0, 0.0);
	}
	
	vec3 surfaceNormal = (transformationMatrix * vec4(actualNormal, 0.0)).xyz;
	
	vec3 norm = normalize(surfaceNormal);
	vec3 tang = normalize((modelViewMatrix * vec4(tangent, 0.0)).xyz);
	vec3 bitang = normalize(cross(norm, tang));
	
	mat3 toTangentSpace = mat3(
		tang.x, bitang.x, norm.x,
		tang.y, bitang.y, norm.y,
		tang.z, bitang.z, norm.z
	);
	
	for(int i = 0; i < maxLights; i++){
		toLightVector[i] = toTangentSpace * (lightPosition[i] - worldPosition.xyz);
		}
	toCameraVector = toTangentSpace * ((inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz);
	
	float distance = length(positionRelativeToCamera.xyz);
	visibility = exp(-pow(distance * density, gradient));
	visibility = clamp(visibility, 0.0, 1.0);
	
	distance = distance - (shadowDistance - transitionDistance);
	distance = distance / transitionDistance;
	shadowCoords.w = clamp(1.0 - distance, 0.0, 1.0);
}